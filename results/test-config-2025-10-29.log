# Test Configuration Log
# Date: October 29, 2025
# Test: 4-Variant PAX Benchmark (10M rows)

## Environment

**Cloudberry Version:**
PostgreSQL 14.4 (Apache Cloudberry 3.0.0-devel+dev.2154.gda0b9d4fe08 build dev)
Compiled: gcc (GCC) 11.5.0 20240719 (Red Hat 11.5.0-5), 64-bit
Compiled on: Oct 29 2025 00:45:08

**Platform:**
OS: Linux 5.14.0-570.17.1.el9_6.x86_64
Architecture: x86_64

**Cluster Topology:**
Segments: 3 (content: 0, 1, 2)
Mirrors: 3 (one per segment)
Master: cdw:7000
Coordinator mode: Synchronized
Configuration: All segments on single host (gpdemo setup)

Segment Configuration:
```
 content | role | preferred_role | mode | status | hostname | address | port
---------+------+----------------+------+--------+----------+---------+------
      -1 | m    | m              | s    | u      | cdw      | cdw     | 7001  (Standby Master)
      -1 | p    | p              | n    | u      | cdw      | cdw     | 7000  (Primary Master)
       0 | m    | m              | s    | u      | cdw      | cdw     | 7005  (Mirror Seg0)
       0 | p    | p              | s    | u      | cdw      | cdw     | 7002  (Primary Seg0)
       1 | m    | m              | s    | u      | cdw      | cdw     | 7006  (Mirror Seg1)
       1 | p    | p              | s    | u      | cdw      | cdw     | 7003  (Primary Seg1)
       2 | m    | m              | s    | u      | cdw      | cdw     | 7007  (Mirror Seg2)
       2 | p    | p              | s    | u      | cdw      | cdw     | 7004  (Primary Seg2)
```

**Database Configuration:**
Max Connections: 150
Shared Buffers: 125 MB
Work Memory: 32 MB (per operation)
Statement Timeout: 0 (disabled for benchmark)

**PAX Extension:**
Status: Available (verified via pg_am query)
Per-column encoding: NOT supported (syntax errors)
Introspection functions: NOT available (get_pax_aux_table missing)

## Test Execution

**Phases Run:**
1. Phase 1: Schema setup (10M customers, 100K products)
2. Phase 2: Create 4 table variants (AO, AOCO, PAX, PAX-no-cluster)
3. Phase 3: Generate 10M rows in fact table
4. Phase 4: Optimize PAX (cluster one variant, leave other unclustered)
5. Phase 5: Execute sample queries on all 4 variants
6. Phase 6: Collect storage and performance metrics

**Commands Executed:**
```bash
# Clean start
psql postgres -c "DROP SCHEMA IF EXISTS benchmark CASCADE; CREATE SCHEMA benchmark;"

# Run all phases
psql postgres -f sql/01_setup_schema.sql
psql postgres -f sql/02_create_variants.sql
psql postgres -f sql/03_generate_data_SMALL.sql
psql postgres -f sql/04_optimize_pax.sql
psql postgres -f sql/05_test_sample_queries.sql
psql postgres -f sql/06_collect_metrics.sql
```

**Total Execution Time:** ~2.5 minutes

## Dataset Configuration

### Dimension Tables
- **customers**: 10,000,000 rows, 1,599 MB
- **products**: 100,000 rows, 20 MB

### Fact Table (4 variants)
- **Rows**: 10,000,000
- **Columns**: 25 (time, IDs, measures, categorical, text, sparse)
- **Estimated Uncompressed**: 6,142 MB
- **Distribution Key**: order_id (all variants)

### Data Generation
- Generated via SQL (generate_series)
- Realistic distributions:
  - 5 regions (skewed)
  - 20 countries
  - 3 sales channels
  - 4 order statuses
  - Random timestamps over 4-year period
  - Sparse fields: 5-10% populated
  - Sequential order IDs (good for delta encoding)

## Table Configurations

### Variant 1: AO (Baseline)
```sql
CREATE TABLE sales_fact_ao (...)
WITH (
    appendonly=true,
    orientation=row,
    compresstype=zstd,
    compresslevel=5
)
DISTRIBUTED BY (order_id);
```

### Variant 2: AOCO (Best Practice)
```sql
CREATE TABLE sales_fact_aoco (...)
WITH (
    appendonly=true,
    orientation=column,
    compresstype=zstd,
    compresslevel=5
)
DISTRIBUTED BY (order_id);
```

### Variant 3: PAX (Clustered)
```sql
CREATE TABLE sales_fact_pax (...)
USING pax WITH (
    compresstype='zstd',
    compresslevel=5,
    minmax_columns='sale_date,order_id,customer_id,product_id,total_amount,quantity',
    bloomfilter_columns='region,country,sales_channel,order_status,product_category,transaction_hash',
    cluster_type='zorder',
    cluster_columns='sale_date,region',
    storage_format='porc'
)
DISTRIBUTED BY (order_id);

-- Then clustered via:
CLUSTER benchmark.sales_fact_pax;
```

### Variant 4: PAX (No-Cluster) - CONTROL GROUP
```sql
CREATE TABLE sales_fact_pax_nocluster (...)
USING pax WITH (
    compresstype='zstd',
    compresslevel=5,
    minmax_columns='sale_date,order_id,customer_id,product_id,total_amount,quantity',
    bloomfilter_columns='region,country,sales_channel,order_status,product_category,transaction_hash',
    -- NO cluster_type or cluster_columns
    storage_format='porc'
)
DISTRIBUTED BY (order_id);

-- No CLUSTER command executed
```

## PAX GUC Configuration

Applied before clustering and queries:
```sql
SET pax.enable_sparse_filter = on;          -- Enable min/max pruning
SET pax.enable_row_filter = off;            -- Optimize for OLAP
SET pax.max_tuples_per_file = 1310720;      -- ~1.3M tuples/file
SET pax.max_size_per_file = 67108864;       -- 64MB files
SET pax.max_tuples_per_group = 131072;      -- 128K tuples/group
SET pax.bloom_filter_work_memory_bytes = 10485760;  -- 10MB
```

## Queries Tested

### Q1: Selective Date Range (Sparse Filtering Test)
```sql
SELECT SUM(total_amount), AVG(quantity), COUNT(*)
FROM benchmark.TABLE_VARIANT
WHERE sale_date BETWEEN '2023-01-01' AND '2023-01-31';
```
**Selectivity**: 0.7% (70,891 / 10M rows)
**Tests**: Min/max statistics, file-level pruning

### Q2: Bloom Filter Test (Multi-Dimensional)
```sql
SELECT region, AVG(total_amount), COUNT(*)
FROM benchmark.TABLE_VARIANT
WHERE region IN ('North America', 'Europe')
  AND sale_date >= '2022-01-01'
GROUP BY region;
```
**Selectivity**: 5% (500,423 / 10M rows)
**Tests**: Bloom filters, Z-order clustering

### Phase 6 Sample: Combined Filters
```sql
SELECT COUNT(*), SUM(total_amount)
FROM benchmark.TABLE_VARIANT
WHERE sale_date BETWEEN '2023-01-01' AND '2023-01-31'
  AND region = 'North America';
```
**Selectivity**: ~0.2%
**Tests**: Multi-dimensional filtering, Z-order effectiveness

## Metrics Collected

### Storage Metrics
- Total relation size (pg_total_relation_size)
- Table size only (pg_relation_size)
- Index size (difference)
- Pre-clustering size
- Post-clustering size
- Compression ratio (estimated uncompressed / actual)

### Performance Metrics
- Query execution time (EXPLAIN ANALYZE)
- Planning time
- Execution time breakdown
- Rows returned
- Rows filtered
- File/page scans

### Memory Metrics
- Executor memory per slice
- Work_mem usage
- Memory wanted (if exceeded)
- Per-query memory footprint

## Test Results Files

Generated files:
- `results/4-variant-test-10M-rows.md` - Full report (15 pages)
- `results/QUICK_SUMMARY.md` - Executive summary (2 pages)
- `results/test-config-2025-10-29.log` - This file

## Issues Encountered

### Syntax Errors (Expected)
- `ALTER COLUMN ... SET ENCODING` not supported
- Per-column encoding feature missing in this PAX version

### Missing Functions (Expected)
- `get_pax_aux_table()` not available
- Cannot inspect PAX micro-partition details
- Cannot verify file-level statistics

### Critical Bugs Found
1. **Clustering storage bloat**: 752 MB → 2,000 MB (2.66x increase)
2. **Clustering memory overhead**: 149 KB → 16,390 KB (110x increase)
3. **Ineffective file-level pruning**: Filtering millions of rows instead of skipping files

## Reproducibility

To reproduce these results:

```bash
# Ensure Cloudberry 3.0.0-devel with PAX extension
psql postgres -c "SELECT version();"
psql postgres -c "SELECT amname FROM pg_am WHERE amname = 'pax';"

# Clone repository
cd pax-benchmark

# Run full 10M row test
psql postgres -c "DROP SCHEMA IF EXISTS benchmark CASCADE; CREATE SCHEMA benchmark;"
psql postgres -f sql/01_setup_schema.sql
psql postgres -f sql/02_create_variants.sql
psql postgres -f sql/03_generate_data_SMALL.sql  # Configured for 10M rows
psql postgres -f sql/04_optimize_pax.sql
psql postgres -f sql/05_test_sample_queries.sql
psql postgres -f sql/06_collect_metrics.sql
```

**Expected runtime**: 2-3 minutes on modern hardware
**Disk space required**: ~5 GB (includes dimension tables and all variants)

## Version Control

**Repository**: pax-benchmark
**Branch**: main
**Commit**: 253c432 Initial commit: PAX storage benchmark suite
**Modified files for 4-variant test**:
- sql/02_create_variants.sql (added PAX no-cluster)
- sql/03_generate_data_SMALL.sql (copy to 4th variant)
- sql/04_optimize_pax.sql (track both PAX variants)
- sql/05_test_sample_queries.sql (query all 4 variants)
- sql/06_collect_metrics.sql (metrics for all 4 variants)

## Contact / Follow-up

For questions about this test or PAX development:
- Test conducted: October 29, 2025
- Cloudberry Version: 3.0.0-devel (development branch)
- PAX Status: Experimental, not production-ready
- Recommend re-testing with stable Cloudberry release

---
End of Test Configuration Log
